#!/usr/bin/perl -w
####################################################################
##           PrimeTime Function for EDA Contest 2016              ##
####################################################################
#Write out the PrimeTime cmd: report_timing -justify
#
#Function
##Reading the timing report and set the path to justify 
##Write out the PrimeTime cmd
##The PrimeTime cmd will exec paralle in PrimeTime
#
#Author
##CIC DSD DTS
##C.L. Huang
#
#Version Info.
##v20101113-1
###Init. veriosn
####################################################################

####################################
## Usage        
####################################
sub print_usage{

print <<ENDL;   
        
        Usage : write_justify_path.pl <filename> <slack_constraint>
               
ENDL
}

####################################
## ARGV Check
####################################
if ($#ARGV == -1) {
    print_usage();
    exit;
}
unless($#ARGV!=2){
    print_usage();
    exit;
}

#################################### 
## VARs 
####################################
#$dir_name = $ARGV[0];
$rptfile_name = $ARGV[0];
$slack_less = $ARGV[1];


print "**********************************************************************\n";
print "*Step 1. Convert the true path list file format to prime time command*"."\n";
print "**********************************************************************\n";
#################################### 
## Main                         
####################################
#print "\nStart the perl function.\n";

#print "\nSTEP: chdir to $dir_name DIR.\n";
#chdir $dir_name || die "Error: Fail to chdir to $dir_name.\n"; 

#print "\nSTEP: Create file system.\n";

#print "the result is !!!!!".$pwd_result;
if (-e "../tmp/parallel_execute_file") {
	unlink "../tmp/parallel_execute_file";
}
system "/bin/touch  ../tmp/parallel_execute_file" || die "Error: Fail to create ../tmp/parallel_execute_file\n";

#system "/usr/bin/perl ../make_dir.pl justify_db" || die "Error: Fail to create justify_db DIR.\n";

#print "\nSTEP: Read the report and write out script.\n";
&read_report;

#################################### 
## Sub
## Read the report lesser than file
####################################
sub read_report{
#print "Notice: Read the report lesser than file.\n";

$get_path = 0;
$path_count = 0;
$path_num = 0;

open (REPORTFILE, "<$rptfile_name") || die "Error: Can't find the $rptfile_name.\n";

while (<REPORTFILE>){
	chomp($_);
        s/^\s+|\t//g;
        if(!($_=~/\S+/)) {next;}

	if($_=~/path/i){
	if($_=~/([\d].*[^\}])/s)
	{
	$path_num =$1;
	}
	}
	if ($_=~/\(in\)/) {
		#print "\nNotice: Start fetch path.\n";
		$get_path = 1;
		$justify_cmd = "\nreport_timing -input_pins -signifi 0 -slack_lesser_than $slack_less \\\n";
	}

	&process_path;
	if ($_=~/\(out\)/) {
		#print "\nNotice: End fetch path.\n";
		$get_path = 0;
		$path_count = $path_count + 1;
		#print "$justify_cmd\n\n";
		&write_cmd;
	}
}

close(REPORTFILE);
}


#################################### 
## Sub
## Process the path
####################################
sub process_path{

if ($get_path == 1){
	@configitem = split(/\s+/);
#	print "$configitem[0] $configitem[4]  ";
	if ($configitem[1] eq "\(in\)") {
		if ($configitem[4] eq "r") {
			$justify_cmd = $justify_cmd."-rise_from ".$configitem[0]." \\\n";
		} elsif ($configitem[4] eq "f") {
			$justify_cmd = $justify_cmd."-fall_from ".$configitem[0]." \\\n";
		} else {
			$justify_cmd = $justify_cmd."-from ".$configitem[0]." \\\n";
		}
	} elsif ($configitem[1] eq "\(out\)") {
                if ($configitem[4] eq "r") {
                        $justify_cmd = $justify_cmd."-rise_to ".$configitem[0]." \\\n";
                } elsif ($configitem[4] eq "f") {
                        $justify_cmd = $justify_cmd."-fall_to ".$configitem[0]." \\\n";            
                } else {
                        $justify_cmd = $justify_cmd."-to ".$configitem[0]." \\\n";
                }
	} else {
                if ($configitem[4] eq "r") {                        
			$justify_cmd = $justify_cmd."-rise_through ".$configitem[0]." \\\n";
                } elsif ($configitem[4] eq "f") {
                        $justify_cmd = $justify_cmd."-fall_through ".$configitem[0]." \\\n";  
                } else {
                        $justify_cmd = $justify_cmd."-through ".$configitem[0]." \\\n";
                }
	}
	
}

}

#################################### 
## Sub
## Write parallel execute cmd
####################################
sub write_cmd{
#print "Notice: Write the cmd.\n";

open (WRITECMDFILE, ">>../tmp/parallel_execute_file") || die "Error: Can't open parallel_execute_file to write.\n";

#print WRITECMDFILE "redirect -bg -file ".$dir_name."/justify_db/".$path_count.".rpt {".$justify_cmd."}\n\n";
print WRITECMDFILE "echo Path {{ $path_num }}\n\n"."$justify_cmd\n\n";


close (WRITECMDFILE);

}
